//---THIS-FILE-WAS-PATCHED , org=D:\projects\cef_binary_3.3071.1647.win32\cpptoc\scheme_handler_factory_cpptoc.cc
// Copyright (c) 2017 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=815287a25120b02a67c6a04cd84132cf7f746f92$
//

#include "libcef_dll/cpptoc/scheme_handler_factory_cpptoc.h"
#include "libcef_dll/cpptoc/resource_handler_cpptoc.h"
#include "libcef_dll/ctocpp/browser_ctocpp.h"
#include "libcef_dll/ctocpp/frame_ctocpp.h"
#include "libcef_dll/ctocpp/request_ctocpp.h"

//---kneadium-ext-begin
#include "../myext/ExportFuncAuto.h"
#include "../myext/InternalHeaderForExportFunc.h"
//---kneadium-ext-end

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

cef_resource_handler_t* CEF_CALLBACK
scheme_handler_factory_create(struct _cef_scheme_handler_factory_t* self,
                              cef_browser_t* browser,
                              cef_frame_t* frame,
                              const cef_string_t* scheme_name,
                              cef_request_t* request) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;
  // Verify param: scheme_name; type: string_byref_const
  DCHECK(scheme_name);
  if (!scheme_name)
    return NULL;
  // Verify param: request; type: refptr_diff
  DCHECK(request);
  if (!request)
    return NULL;
  // Unverified params: browser, frame

//---kneadium-ext-begin147
#if ENABLE_KNEADIUM_EXT
auto me = CefSchemeHandlerFactoryCppToC::Get(self);
const int CALLER_CODE=(CefSchemeHandlerFactoryExt::_typeName << 16) | CefSchemeHandlerFactoryExt::CefSchemeHandlerFactoryExt_Create_1;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefString tmp_arg3 (scheme_name);
CefSchemeHandlerFactoryExt::CreateArgs args1(browser,frame,tmp_arg3,request);
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefResourceHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefResourceHandler> _retval =
      CefSchemeHandlerFactoryCppToC::Get(self)->Create(
          CefBrowserCToCpp::Wrap(browser), CefFrameCToCpp::Wrap(frame),
          CefString(scheme_name), CefRequestCToCpp::Wrap(request));

  // Return type: refptr_same
  return CefResourceHandlerCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

CefSchemeHandlerFactoryCppToC::CefSchemeHandlerFactoryCppToC() {
  GetStruct()->create = scheme_handler_factory_create;
}

template <>
CefRefPtr<CefSchemeHandlerFactory> CefCppToCRefCounted<
    CefSchemeHandlerFactoryCppToC,
    CefSchemeHandlerFactory,
    cef_scheme_handler_factory_t>::UnwrapDerived(CefWrapperType type,
                                                 cef_scheme_handler_factory_t*
                                                     s) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#if DCHECK_IS_ON()
template <>
base::AtomicRefCount
    CefCppToCRefCounted<CefSchemeHandlerFactoryCppToC,
                        CefSchemeHandlerFactory,
                        cef_scheme_handler_factory_t>::DebugObjCt = 0;
#endif

template <>
CefWrapperType CefCppToCRefCounted<CefSchemeHandlerFactoryCppToC,
                                   CefSchemeHandlerFactory,
                                   cef_scheme_handler_factory_t>::kWrapperType =
    WT_SCHEME_HANDLER_FACTORY;
