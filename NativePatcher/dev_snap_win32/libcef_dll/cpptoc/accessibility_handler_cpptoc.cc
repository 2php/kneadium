//---THIS-FILE-WAS-PATCHED , org=D:\projects\cef_binary_3.3071.1647.win32\cpptoc\accessibility_handler_cpptoc.cc
// Copyright (c) 2017 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=fa03e8ba9a443a9028246fe21a8995d8a7bdb7d5$
//

#include "libcef_dll/cpptoc/accessibility_handler_cpptoc.h"
#include "libcef_dll/ctocpp/value_ctocpp.h"

//---kneadium-ext-begin
#include "../myext/ExportFuncAuto.h"
#include "../myext/InternalHeaderForExportFunc.h"
//---kneadium-ext-end

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK accessibility_handler_on_accessibility_tree_change(
    struct _cef_accessibility_handler_t* self,
    struct _cef_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: value; type: refptr_diff
  DCHECK(value);
  if (!value)
    return;

//---kneadium-ext-begin
auto me = CefAccessibilityHandlerCppToC::Get(self);
const int CALLER_CODE=(CefAccessibilityHandlerExt::_typeName << 16) | CefAccessibilityHandlerExt::CefAccessibilityHandlerExt_OnAccessibilityTreeChange_1;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefAccessibilityHandlerExt::OnAccessibilityTreeChangeArgs args1(value);
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
return;
}
}
//---kneadium-ext-end

  // Execute
  CefAccessibilityHandlerCppToC::Get(self)->OnAccessibilityTreeChange(
      CefValueCToCpp::Wrap(value));
}

void CEF_CALLBACK accessibility_handler_on_accessibility_location_change(
    struct _cef_accessibility_handler_t* self,
    struct _cef_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: value; type: refptr_diff
  DCHECK(value);
  if (!value)
    return;

//---kneadium-ext-begin
auto me = CefAccessibilityHandlerCppToC::Get(self);
const int CALLER_CODE=(CefAccessibilityHandlerExt::_typeName << 16) | CefAccessibilityHandlerExt::CefAccessibilityHandlerExt_OnAccessibilityLocationChange_2;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefAccessibilityHandlerExt::OnAccessibilityLocationChangeArgs args1(value);
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
return;
}
}
//---kneadium-ext-end

  // Execute
  CefAccessibilityHandlerCppToC::Get(self)->OnAccessibilityLocationChange(
      CefValueCToCpp::Wrap(value));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

CefAccessibilityHandlerCppToC::CefAccessibilityHandlerCppToC() {
  GetStruct()->on_accessibility_tree_change =
      accessibility_handler_on_accessibility_tree_change;
  GetStruct()->on_accessibility_location_change =
      accessibility_handler_on_accessibility_location_change;
}

template <>
CefRefPtr<CefAccessibilityHandler> CefCppToCRefCounted<
    CefAccessibilityHandlerCppToC,
    CefAccessibilityHandler,
    cef_accessibility_handler_t>::UnwrapDerived(CefWrapperType type,
                                                cef_accessibility_handler_t*
                                                    s) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#if DCHECK_IS_ON()
template <>
base::AtomicRefCount
    CefCppToCRefCounted<CefAccessibilityHandlerCppToC,
                        CefAccessibilityHandler,
                        cef_accessibility_handler_t>::DebugObjCt = 0;
#endif

template <>
CefWrapperType CefCppToCRefCounted<CefAccessibilityHandlerCppToC,
                                   CefAccessibilityHandler,
                                   cef_accessibility_handler_t>::kWrapperType =
    WT_ACCESSIBILITY_HANDLER;
