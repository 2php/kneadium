//---THIS-FILE-WAS-PATCHED , org=D:\projects\cef_binary_3.3071.1647.win32\cpptoc\client_cpptoc.cc
// Copyright (c) 2017 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4ddb855e437a437ac87a894769d7e8c6cf208988$
//

#include "libcef_dll/cpptoc/client_cpptoc.h"
#include "libcef_dll/cpptoc/context_menu_handler_cpptoc.h"
#include "libcef_dll/cpptoc/dialog_handler_cpptoc.h"
#include "libcef_dll/cpptoc/display_handler_cpptoc.h"
#include "libcef_dll/cpptoc/download_handler_cpptoc.h"
#include "libcef_dll/cpptoc/drag_handler_cpptoc.h"
#include "libcef_dll/cpptoc/find_handler_cpptoc.h"
#include "libcef_dll/cpptoc/focus_handler_cpptoc.h"
#include "libcef_dll/cpptoc/geolocation_handler_cpptoc.h"
#include "libcef_dll/cpptoc/jsdialog_handler_cpptoc.h"
#include "libcef_dll/cpptoc/keyboard_handler_cpptoc.h"
#include "libcef_dll/cpptoc/life_span_handler_cpptoc.h"
#include "libcef_dll/cpptoc/load_handler_cpptoc.h"
#include "libcef_dll/cpptoc/render_handler_cpptoc.h"
#include "libcef_dll/cpptoc/request_handler_cpptoc.h"
#include "libcef_dll/ctocpp/browser_ctocpp.h"
#include "libcef_dll/ctocpp/process_message_ctocpp.h"

//---kneadium-ext-begin
#include "../myext/ExportFuncAuto.h"
#include "../myext/InternalHeaderForExportFunc.h"
//---kneadium-ext-end

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

struct _cef_context_menu_handler_t* CEF_CALLBACK
client_get_context_menu_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin27
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetContextMenuHandler_1;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetContextMenuHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefContextMenuHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefContextMenuHandler> _retval =
      CefClientCppToC::Get(self)->GetContextMenuHandler();

  // Return type: refptr_same
  return CefContextMenuHandlerCppToC::Wrap(_retval);
}

struct _cef_dialog_handler_t* CEF_CALLBACK
client_get_dialog_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin26
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetDialogHandler_2;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetDialogHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefDialogHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefDialogHandler> _retval =
      CefClientCppToC::Get(self)->GetDialogHandler();

  // Return type: refptr_same
  return CefDialogHandlerCppToC::Wrap(_retval);
}

struct _cef_display_handler_t* CEF_CALLBACK
client_get_display_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin25
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetDisplayHandler_3;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetDisplayHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefDisplayHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefDisplayHandler> _retval =
      CefClientCppToC::Get(self)->GetDisplayHandler();

  // Return type: refptr_same
  return CefDisplayHandlerCppToC::Wrap(_retval);
}

struct _cef_download_handler_t* CEF_CALLBACK
client_get_download_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin24
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetDownloadHandler_4;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetDownloadHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefDownloadHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefDownloadHandler> _retval =
      CefClientCppToC::Get(self)->GetDownloadHandler();

  // Return type: refptr_same
  return CefDownloadHandlerCppToC::Wrap(_retval);
}

struct _cef_drag_handler_t* CEF_CALLBACK
client_get_drag_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin23
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetDragHandler_5;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetDragHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefDragHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefDragHandler> _retval =
      CefClientCppToC::Get(self)->GetDragHandler();

  // Return type: refptr_same
  return CefDragHandlerCppToC::Wrap(_retval);
}

struct _cef_find_handler_t* CEF_CALLBACK
client_get_find_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin22
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetFindHandler_6;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetFindHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefFindHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefFindHandler> _retval =
      CefClientCppToC::Get(self)->GetFindHandler();

  // Return type: refptr_same
  return CefFindHandlerCppToC::Wrap(_retval);
}

struct _cef_focus_handler_t* CEF_CALLBACK
client_get_focus_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin21
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetFocusHandler_7;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetFocusHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefFocusHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefFocusHandler> _retval =
      CefClientCppToC::Get(self)->GetFocusHandler();

  // Return type: refptr_same
  return CefFocusHandlerCppToC::Wrap(_retval);
}

struct _cef_geolocation_handler_t* CEF_CALLBACK
client_get_geolocation_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin20
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetGeolocationHandler_8;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetGeolocationHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefGeolocationHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefGeolocationHandler> _retval =
      CefClientCppToC::Get(self)->GetGeolocationHandler();

  // Return type: refptr_same
  return CefGeolocationHandlerCppToC::Wrap(_retval);
}

struct _cef_jsdialog_handler_t* CEF_CALLBACK
client_get_jsdialog_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin19
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetJSDialogHandler_9;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetJSDialogHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefJSDialogHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefJSDialogHandler> _retval =
      CefClientCppToC::Get(self)->GetJSDialogHandler();

  // Return type: refptr_same
  return CefJSDialogHandlerCppToC::Wrap(_retval);
}

struct _cef_keyboard_handler_t* CEF_CALLBACK
client_get_keyboard_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin18
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetKeyboardHandler_10;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetKeyboardHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefKeyboardHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefKeyboardHandler> _retval =
      CefClientCppToC::Get(self)->GetKeyboardHandler();

  // Return type: refptr_same
  return CefKeyboardHandlerCppToC::Wrap(_retval);
}

struct _cef_life_span_handler_t* CEF_CALLBACK
client_get_life_span_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin17
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetLifeSpanHandler_11;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetLifeSpanHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefLifeSpanHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefLifeSpanHandler> _retval =
      CefClientCppToC::Get(self)->GetLifeSpanHandler();

  // Return type: refptr_same
  return CefLifeSpanHandlerCppToC::Wrap(_retval);
}

struct _cef_load_handler_t* CEF_CALLBACK
client_get_load_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin16
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetLoadHandler_12;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetLoadHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefLoadHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefLoadHandler> _retval =
      CefClientCppToC::Get(self)->GetLoadHandler();

  // Return type: refptr_same
  return CefLoadHandlerCppToC::Wrap(_retval);
}

struct _cef_render_handler_t* CEF_CALLBACK
client_get_render_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin15
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetRenderHandler_13;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetRenderHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefRenderHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefRenderHandler> _retval =
      CefClientCppToC::Get(self)->GetRenderHandler();

  // Return type: refptr_same
  return CefRenderHandlerCppToC::Wrap(_retval);
}

struct _cef_request_handler_t* CEF_CALLBACK
client_get_request_handler(struct _cef_client_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

//---kneadium-ext-begin14
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_GetRequestHandler_14;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::GetRequestHandlerArgs args1;
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return CefRequestHandlerCppToC::Wrap(args1.arg.myext_ret_value);
}
}
#endif
//---kneadium-ext-end

  // Execute
  CefRefPtr<CefRequestHandler> _retval =
      CefClientCppToC::Get(self)->GetRequestHandler();

  // Return type: refptr_same
  return CefRequestHandlerCppToC::Wrap(_retval);
}

int CEF_CALLBACK
client_on_process_message_received(struct _cef_client_t* self,
                                   cef_browser_t* browser,
                                   cef_process_id_t source_process,
                                   struct _cef_process_message_t* message) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser)
    return 0;
  // Verify param: message; type: refptr_diff
  DCHECK(message);
  if (!message)
    return 0;

//---kneadium-ext-begin13
#if ENABLE_KNEADIUM_EXT
auto me = CefClientCppToC::Get(self);
const int CALLER_CODE=(CefClientExt::_typeName << 16) | CefClientExt::CefClientExt_OnProcessMessageReceived_15;
auto m_callback= me->GetManagedCallBack(CALLER_CODE);
if(m_callback){
CefClientExt::OnProcessMessageReceivedArgs args1(browser,source_process,message);
m_callback(CALLER_CODE, &args1.arg);
 if (((args1.arg.myext_flags >> 21) & 1) == 1){
 return args1.arg.myext_ret_value;
}
}
#endif
//---kneadium-ext-end

  // Execute
  bool _retval = CefClientCppToC::Get(self)->OnProcessMessageReceived(
      CefBrowserCToCpp::Wrap(browser), source_process,
      CefProcessMessageCToCpp::Wrap(message));

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

CefClientCppToC::CefClientCppToC() {
  GetStruct()->get_context_menu_handler = client_get_context_menu_handler;
  GetStruct()->get_dialog_handler = client_get_dialog_handler;
  GetStruct()->get_display_handler = client_get_display_handler;
  GetStruct()->get_download_handler = client_get_download_handler;
  GetStruct()->get_drag_handler = client_get_drag_handler;
  GetStruct()->get_find_handler = client_get_find_handler;
  GetStruct()->get_focus_handler = client_get_focus_handler;
  GetStruct()->get_geolocation_handler = client_get_geolocation_handler;
  GetStruct()->get_jsdialog_handler = client_get_jsdialog_handler;
  GetStruct()->get_keyboard_handler = client_get_keyboard_handler;
  GetStruct()->get_life_span_handler = client_get_life_span_handler;
  GetStruct()->get_load_handler = client_get_load_handler;
  GetStruct()->get_render_handler = client_get_render_handler;
  GetStruct()->get_request_handler = client_get_request_handler;
  GetStruct()->on_process_message_received = client_on_process_message_received;
}

template <>
CefRefPtr<CefClient>
CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::UnwrapDerived(
    CefWrapperType type,
    cef_client_t* s) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#if DCHECK_IS_ON()
template <>
base::AtomicRefCount
    CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::DebugObjCt =
        0;
#endif

template <>
CefWrapperType CefCppToCRefCounted<CefClientCppToC, CefClient, cef_client_t>::
    kWrapperType = WT_CLIENT;
