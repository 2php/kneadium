//###_ORIGINAL D:\projects\cef_binary_3.2526.1366\cefclient\browser/client_handler.cc
//###_START 0
if ((params->GetTypeFlags() & (CM_TYPEFLAG_PAGE | CM_TYPEFLAG_FRAME)) != 0) {
//###_APPEND_START 0
if (this->mcallback_)
		{
			//send menu model to managed side
			this->mcallback_(109, NULL);
		}
		else if ((params->GetTypeFlags() & (CM_TYPEFLAG_PAGE | CM_TYPEFLAG_FRAME)) != 0) {
			// Add a separator if the menu already has items.
			if (model->GetCount() > 0)
				model->AddSeparator();

			// Add DevTools items to all context menus.
			model->AddItem(CLIENT_ID_SHOW_DEVTOOLS, "&Show DevTools");
			model->AddItem(CLIENT_ID_CLOSE_DEVTOOLS, "Close DevTools");
			model->AddSeparator();
			model->AddItem(CLIENT_ID_INSPECT_ELEMENT, "Inspect Element");

			// Test context menu features.
			BuildTestMenu(model);
		}
//###_APPEND_STOP
//###_START 1
bool ClientHandler::OnContextMenuCommand(
//###_FIND_NEXT_LANDMARK 1
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 1
if (this->mcallback_) {
			return true;
		}
		else {
			switch (command_id) {
			case CLIENT_ID_SHOW_DEVTOOLS:
				ShowDevTools(browser, CefPoint());
				return true;
			case CLIENT_ID_CLOSE_DEVTOOLS:
				CloseDevTools(browser);
				return true;
			case CLIENT_ID_INSPECT_ELEMENT:
				ShowDevTools(browser, CefPoint(params->GetXCoord(), params->GetYCoord()));
				return true;
			default:  // Allow default handling, if any.
				return ExecuteTestMenu(command_id);
			}
		}
//###_APPEND_STOP
//###_SKIP_UNTIL_PASS 1 }
//###_START 2
bool ClientHandler::OnConsoleMessage(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 2
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 2
if (this->mcallback_) {

			//get managed stream object
			MethodArgs* args = new MethodArgs();
			// memset(&args,0,sizeof(MethodArgs));	  
			//send info to managed side

			auto str16 = message.ToString16();
			auto cstr = str16.c_str();
			args->SetArgAsString(0, cstr); 
			auto str16_1 = message.ToString16();
			auto cstr_1 = str16_1.c_str();
			args->SetArgAsString(1, cstr_1); 
			auto str16_2 = std::to_wstring((long long)line);
			auto cstr_2 = str16_2.c_str();
			args->SetArgAsString(2, cstr_2); 
			this->mcallback_(106, args); 

		}
		else {
			FILE* file = fopen(console_log_file_.c_str(), "a");
			if (file) {
				std::stringstream ss;
				ss << "Message: " << message.ToString() << NEWLINE <<
					"Source: " << source.ToString() << NEWLINE <<
					"Line: " << line << NEWLINE <<
					"-----------------------" << NEWLINE;
				fputs(ss.str().c_str(), file);
				fclose(file);

				if (first_console_message_) {
					test_runner::Alert(
						browser, "Console messages written to " + console_log_file_ );
					first_console_message_ = false;
				}
			}
		}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 2
return false;
//###_START 3
// Allow geolocation access from all websites.
//###_APPEND_START 3
callback->Continue(false);
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 3
return true;
//###_START 4
bool ClientHandler::OnBeforePopup(
//###_FIND_NEXT_LANDMARK 4
CEF_REQUIRE_IO_THREAD();
//###_APPEND_START 4
if (this->mcallback_) {
			//create popup window
			//with specific url
			//*** on managed side  : please invoke on main process of app ***

			//call across process, so create on heap 
			//don't forget to release it
			MethodArgs* metArgs = new MethodArgs();
			auto str16 = target_url.ToString16();
			auto cstr = str16.c_str();

			metArgs->SetArgAsString(0, cstr);
			this->mcallback_(104, metArgs);


			return true;
		}
		else {

			// Return true to cancel the popup window.
			return !CreatePopupWindow(browser, false, popupFeatures, windowInfo, client,
				settings);
		}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 4
}
//###_START 5
void ClientHandler::OnAfterCreated(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 5
message_router_ = CefMessageRouterBrowserSide::Create(config);
//###_APPEND_START 5
// Register handlers with the router.
			if (this->mcallback_)
			{
				//1. msg handler
				MyCefJsHandler* myCefJsHandler = new MyCefJsHandler();
				message_handler_set_.insert(myCefJsHandler);
				myCefJsHandler->mcallback_ = this->mcallback_;

				MessageHandlerSet::const_iterator it = message_handler_set_.begin();
				for (; it != message_handler_set_.end(); ++it)
					message_router_->AddHandler(*(it), false);
			}
			else
			{
				test_runner::CreateMessageHandlers(message_handler_set_);
				MessageHandlerSet::const_iterator it = message_handler_set_.begin();
				for (; it != message_handler_set_.end(); ++it)
					message_router_->AddHandler(*(it), false);

			}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 5
}
//###_START 6
void ClientHandler::ShowDevTools(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 6
CefBrowserSettings settings;
//###_APPEND_START 6
if (this->mcallback_)
		{
			//TODO: send cmd to managed side
			//create dev window
			//send cef client 
			this->mcallback_(107, NULL);

		}
		else {
			if (CreatePopupWindow(browser, true, CefPopupFeatures(), windowInfo, client,
				settings)) {
				browser->GetHost()->ShowDevTools(windowInfo, client, settings,
					inspect_element_at);
			}
		  }
//###_APPEND_STOP
//###_SKIP_UNTIL_PASS 6 }
//###_START 7
void ClientHandler::CloseDevTools(CefRefPtr<CefBrowser> browser) {
//###_APPEND_START 7
if (this->mcallback_) {
			//TODO: send command
			this->mcallback_(108, NULL);
		}
		else {
			browser->GetHost()->CloseDevTools();
		}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 7
}
//###_START 8
void ClientHandler::NotifyBrowserCreated(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 8
MAIN_POST_CLOSURE(
//###_FIND_NEXT_LANDMARK 8
}
//###_APPEND_START 8
if (this->mcallback_) {
			            this->mcallback_(101, NULL);
		         }
//###_APPEND_STOP
//###_START 9
void ClientHandler::NotifyBrowserClosed(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 9
delegate_->OnBrowserClosed(browser);
//###_APPEND_START 9
if (this->mcallback_) {
			this->mcallback_(100, NULL);
		        }
//###_APPEND_STOP
//###_START 10
bool ClientHandler::ExecuteTestMenu(int command_id) {
//###_FIND_NEXT_LANDMARK 10
// Allow default handling to proceed.
//###_FIND_NEXT_LANDMARK 10
return false;
//###_FIND_NEXT_LANDMARK 10
}
//###_APPEND_START 10
//my extension ***
	void ClientHandler::MyCefSetManagedCallBack(managed_callback m) {

		this->mcallback_ = m;
		//add resource mx handler

		MethodArgs args;
		memset(&args, 0, sizeof(MethodArgs));

		//get filter function ptr from managed side
		args.SetArgAsNativeObject(0, resource_manager_);
		
		m(140, &args);

		//1. add url filter
		//2. add resource provider
		client::test_runner::SetupResourceManager2(resource_manager_, m); 
	}
//###_APPEND_STOP
