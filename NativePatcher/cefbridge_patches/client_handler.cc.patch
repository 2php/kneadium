//###_ORIGINAL D:\projects\cef_binary_3.2623.1399\cefclient\browser//client_handler.cc
//###_START 0
ClientHandler::ClientHandler(Delegate* delegate,
//###_FIND_NEXT_LANDMARK 0
DCHECK(!console_log_file_.empty());
//###_APPEND_START 0
this->mcallback_ = NULL;
this->enableKeyIntercept = 0;//init
//###_APPEND_STOP
//###_START 0
void ClientHandler::OnBeforeContextMenu(
//###_FIND_NEXT_LANDMARK 0
if ((params->GetTypeFlags() & (CM_TYPEFLAG_PAGE | CM_TYPEFLAG_FRAME)) != 0) {
//###_APPEND_START 0
if (this->mcallback_)
{
//send menu model to managed side
model->Clear();
this->mcallback_(CEF_MSG_ClientHandler_OnBeforeContextMenu, NULL);
}
else if ((params->GetTypeFlags() & (CM_TYPEFLAG_PAGE | CM_TYPEFLAG_FRAME)) != 0) {
// Add a separator if the menu already has items.
if (model->GetCount() > 0) {
model->AddSeparator();
}

// Add DevTools items to all context menus.
model->AddItem(CLIENT_ID_SHOW_DEVTOOLS, "&Show DevTools");
model->AddItem(CLIENT_ID_CLOSE_DEVTOOLS, "Close DevTools");
model->AddSeparator();
model->AddItem(CLIENT_ID_INSPECT_ELEMENT, "Inspect Element");

// Test context menu features.
BuildTestMenu(model);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_PASS 0 }
//###_START 1
bool ClientHandler::OnContextMenuCommand(
//###_FIND_NEXT_LANDMARK 1
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 1
if (this->mcallback_) {
return true;
}
else {
switch (command_id) {
case CLIENT_ID_SHOW_DEVTOOLS:
ShowDevTools(browser, CefPoint());
return true;
case CLIENT_ID_CLOSE_DEVTOOLS:
CloseDevTools(browser);
return true;
case CLIENT_ID_INSPECT_ELEMENT:
ShowDevTools(browser, CefPoint(params->GetXCoord(), params->GetYCoord()));
return true;
default:  // Allow default handling, if any.
return ExecuteTestMenu(command_id);
}
}
//###_APPEND_STOP
//###_SKIP_UNTIL_PASS 1 }
//###_START 2
bool ClientHandler::OnConsoleMessage(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 2
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 2
if (this->mcallback_) {

MethodArgs args;
memset(&args, 0, sizeof(MethodArgs));
auto str16 = message.ToString16();
auto cstr = str16.c_str();
args.SetArgAsString(0, cstr);
auto str16_1 = message.ToString16();
auto cstr_1 = str16_1.c_str();
args.SetArgAsString(1, cstr_1);
auto str16_2 = std::to_wstring((long long)line);
auto cstr_2 = str16_2.c_str();
args.SetArgAsString(2, cstr_2);
this->mcallback_(CEF_MSG_ClientHandler_OnConsoleMessage,&args); 
}
else {
FILE* file = fopen(console_log_file_.c_str(), "a");
if (file) {
std::stringstream ss;
ss << "Message: " << message.ToString() << NEWLINE <<
"Source: " << source.ToString() << NEWLINE <<
"Line: " << line << NEWLINE <<
"-----------------------" << NEWLINE;
fputs(ss.str().c_str(), file);
fclose(file);

if (first_console_message_) {
test_runner::Alert(
browser, "Console messages written to " + console_log_file_);
first_console_message_ = false;
}
}
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 2
return false;
//###_START 3
// Allow geolocation access from all websites.
//###_APPEND_START 3
callback->Continue(false); //I cancel all :)
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 3
return true;
//###_START 7
bool ClientHandler::OnPreKeyEvent(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 7
CEF_REQUIRE_UI_THREAD();
//###_APPEND_START 7
if (this->mcallback_) { 

if (this->enableKeyIntercept != 0)
{
MethodArgs metArgs;
memset(&metArgs, 0, sizeof(MethodArgs));
metArgs.SetArgAsNativeObject(0, &event);
this->mcallback_(CEF_MSG_ClientHandler_OnPreKeyEvent, &metArgs); //tmp
int result = metArgs.ReadOutputAsInt32(0); 
return result != 0;
}
return false;  
}
else {
if (!event.focus_on_editable_field && event.windows_key_code == 0x20) {
// Special handling for the space character when an input element does not
// have focus. Handling the event in OnPreKeyEvent() keeps the event from
// being processed in the renderer. If we instead handled the event in the
// OnKeyEvent() method the space key would cause the window to scroll in
// addition to showing the alert box.
if (event.type == KEYEVENT_RAWKEYDOWN)
test_runner::Alert(browser, "You pressed the space bar!");
return true;
}
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 7
return false;
//###_START 4
bool ClientHandler::OnBeforePopup(
//###_FIND_NEXT_LANDMARK 4
CEF_REQUIRE_IO_THREAD();
//###_APPEND_START 4
if (this->mcallback_) {
//create popup window
//with specific url
//*** on managed side  : please invoke on main process of app ***

//call across process, so create on heap 
//don't forget to release it
MethodArgs metArgs;
memset(&metArgs, 0, sizeof(MethodArgs));

auto str16 = target_url.ToString16();
auto cstr = str16.c_str();

metArgs.SetArgAsString(0, cstr);
this->mcallback_(CEF_MSG_ClientHandler_OnBeforePopup, &metArgs);


return true;
}
else {

// Return true to cancel the popup window.
return !CreatePopupWindow(browser, false, popupFeatures, windowInfo, client,
settings);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 4
}
//###_START 5
void ClientHandler::OnAfterCreated(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 5
message_router_ = CefMessageRouterBrowserSide::Create(config);
//###_APPEND_START 5
// Register handlers with the router.
if (this->mcallback_)
{
//1. msg handler
MyCefJsHandler* myCefJsHandler = new MyCefJsHandler();
message_handler_set_.insert(myCefJsHandler);
myCefJsHandler->mcallback_ = this->mcallback_;

MessageHandlerSet::const_iterator it = message_handler_set_.begin();
for (; it != message_handler_set_.end(); ++it)
message_router_->AddHandler(*(it), false);
}
else
{
test_runner::CreateMessageHandlers(message_handler_set_);
MessageHandlerSet::const_iterator it = message_handler_set_.begin();
for (; it != message_handler_set_.end(); ++it)
message_router_->AddHandler(*(it), false);

}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 5
}
//###_START 6
void ClientHandler::OnLoadError(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 6
// Don't display an error for external protocols that we allow the OS to
//###_FIND_NEXT_LANDMARK 6
// handle. See OnProtocolExecution().
//###_APPEND_START 6
if (this->mcallback_)
{
//TODO: send cmd to managed side
//create dev window
//send cef client
MethodArgs  args;
memset(&args, 0, sizeof(MethodArgs));
//send info to managed side 
args.SetArgAsNativeObject(0, browser.get());
args.SetArgAsNativeObject(1, frame.get());
args.SetArgAsInt32(2, errorCode);
auto str16 = errorText.ToString16();
auto cstr = str16.c_str();
args.SetArgAsString(3, cstr);

auto str16_1 = failedUrl.ToString16();
auto cstr_1 = str16_1.c_str();
args.SetArgAsString(4, cstr_1);
//------------------------
this->mcallback_(CEF_MSG_ClientHandler_OnLoadError, &args);
//------------------------			 
//load page error

LoadErrorPage(frame, failedUrl, errorCode, errorText);
}
else
{
if (errorCode == ERR_UNKNOWN_URL_SCHEME) {
std::string urlStr = frame->GetURL();
if (urlStr.find("spotify:") == 0)
return;
}
// Load the error page. 
LoadErrorPage(frame, failedUrl, errorCode, errorText);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_PASS 6 }
//###_START 6
void ClientHandler::ShowDevTools(CefRefPtr<CefBrowser> browser,
//###_FIND_NEXT_LANDMARK 6
CefBrowserSettings settings;
//###_APPEND_START 6
if (this->mcallback_)
{
//TODO: send cmd to managed side
//create dev window
//send cef client 
this->mcallback_(CEF_MSG_ClientHandler_ShowDevTools, NULL);
}
else {
if (CreatePopupWindow(browser, true, CefPopupFeatures(), windowInfo, client,
settings)) {
browser->GetHost()->ShowDevTools(windowInfo, client, settings,
inspect_element_at);
}
}
//###_APPEND_STOP
//###_SKIP_UNTIL_PASS 6 }
//###_START 7
void ClientHandler::CloseDevTools(CefRefPtr<CefBrowser> browser) {
//###_APPEND_START 7
if (this->mcallback_) {
//TODO: send command
this->mcallback_(CEF_MSG_ClientHandler_CloseDevTools, NULL);
}
else {
browser->GetHost()->CloseDevTools();
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 7
}
//###_START 8
void ClientHandler::NotifyBrowserCreated(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 8
MAIN_POST_CLOSURE(
//###_FIND_NEXT_LANDMARK 8
}
//###_APPEND_START 8
if (this->mcallback_) {
this->mcallback_(CEF_MSG_ClientHandler_NotifyBrowserCreated, NULL);
}
//###_APPEND_STOP
//###_START 9
void ClientHandler::NotifyBrowserClosed(CefRefPtr<CefBrowser> browser) {
//###_FIND_NEXT_LANDMARK 9
delegate_->OnBrowserClosed(browser);
//###_APPEND_START 9
if (this->mcallback_) {
this->mcallback_(CEF_MSG_ClientHandler_NotifyBrowserClosed, NULL);
}
//###_APPEND_STOP
//###_START 11
void ClientHandler::NotifyAddress(const CefString& url) {
//###_FIND_NEXT_LANDMARK 11
if (!CURRENTLY_ON_MAIN_THREAD()) {
//###_FIND_NEXT_LANDMARK 11
}
//###_APPEND_START 11
if (this->mcallback_ != NULL) {
MethodArgs metArgs;
memset(&metArgs, 0, sizeof(MethodArgs));
auto str16 = url.ToString16();
auto cstr = str16.c_str();
metArgs.SetArgAsString(0, cstr);
this->mcallback_(CEF_MSG_ClientHandler_NotifyAddress, &metArgs);

}
else {
if (delegate_)
delegate_->OnSetAddress(url);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 11
}
//###_START 10
void ClientHandler::NotifyTitle(const CefString& title) {
//###_FIND_NEXT_LANDMARK 10
if (!CURRENTLY_ON_MAIN_THREAD()) {
//###_FIND_NEXT_LANDMARK 10
}
//###_APPEND_START 10
if (this->mcallback_ != NULL) {

//alloc on heap , don't forget to delete
MethodArgs metArgs;
memset(&metArgs, 0, sizeof(MethodArgs));
auto str16 = title.ToString16();
auto cstr = str16.c_str();
metArgs.SetArgAsString(0, cstr);
this->mcallback_(CEF_MSG_ClientHandler_NotifyTitle, &metArgs);

}
else {
if (delegate_)
delegate_->OnSetTitle(title);
}
//###_APPEND_STOP
//###_SKIP_UNTIL_AND_ACCEPT 10
}
//###_START 10
bool ClientHandler::ExecuteTestMenu(int command_id) {
//###_FIND_NEXT_LANDMARK 10
// Allow default handling to proceed.
//###_FIND_NEXT_LANDMARK 10
return false;
//###_FIND_NEXT_LANDMARK 10
}
//###_APPEND_START 10
//my extension ***
void ClientHandler::MyCefSetManagedCallBack(managed_callback m) {

this->mcallback_ = m;
//add resource mx handler

MethodArgs args;
memset(&args, 0, sizeof(MethodArgs));

//get filter function ptr from managed side
args.SetArgAsNativeObject(0, resource_manager_);

m(CEF_MSG_ClientHandler_SetResourceManager, &args);

//1. add url filter
//2. add resource provider
client::test_runner::SetupResourceManager2(resource_manager_, m);
}
void ClientHandler::MyCefEnableKeyIntercept(int enable) {
this->enableKeyIntercept = enable;
}
//###_APPEND_STOP
