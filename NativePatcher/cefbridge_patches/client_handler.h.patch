//###_ORIGINAL D:\projects\cef_binary_3.2623.1399\cefclient\browser//client_handler.h
//###_START 0
#include "cefclient/browser/client_types.h"
//###_APPEND_START 0
//my extension
//###_APPEND_STOP
//###_APPEND_START 0
#include "cefclient/myext/mycef.h"
//###_APPEND_STOP
//###_START 1
bool is_osr() const { return is_osr_; }
//###_APPEND_START 1
//my extension
void MyCefSetManagedCallBack(managed_callback m);
void MyCefEnableKeyIntercept(int enable);
//###_APPEND_STOP
//###_START 2
// Set of Handlers registered with the message router.
//###_FOLLOW_BY 2
MessageHandlerSet message_handler_set_;
//###_APPEND_START 2
//my extension
managed_callback mcallback_;//my extension
int enableKeyIntercept;
//###_APPEND_STOP
//###_APPEND_START 2
std::string RequestUrlFilter(const std::string& url);//my extension
//###_APPEND_STOP
//###_FIND_NEXT_LANDMARK 2
};
//###_APPEND_START 2
//----------




// Handle messages in the browser process.
// via cefQuery
class MyCefJsHandler : public CefMessageRouterBrowserSide::Handler {
public:

managed_callback mcallback_;//my extension
MyCefJsHandler() {}

virtual bool OnQuery(CefRefPtr<CefBrowser> browser,
CefRefPtr<CefFrame> frame,
int64 query_id,
const CefString& request,
bool persistent,
CefRefPtr<Callback> callback) OVERRIDE {
CEF_REQUIRE_UI_THREAD();

//const std::string& request_str = request;
if (this->mcallback_)
{


QueryRequestArgs queryReq;
memset(&queryReq, 0, sizeof(QueryRequestArgs));
queryReq.browser = browser.get();
queryReq.frame = frame.get();
queryReq.query_id = query_id;

//queryReq.request = &request;
MyCefStringHolder mystr;
mystr.value = request;
queryReq.request = &mystr;
queryReq.persistent = persistent;
queryReq.callback = callback.get();

MethodArgs args;
memset(&args, 0, sizeof(MethodArgs));
args.SetArgAsNativeObject(0, &queryReq);
this->mcallback_(205, &args);

//auto result = args.ReadOutputAsString(0);
CefString cefstr = args.ReadOutputAsString(0);
callback->Success(cefstr);

return true;
}

return false;
}//OnQuery
}; //class MyCefJsHandler
//###_APPEND_STOP
